@page "/creategoal"
@inject IGoalService GoalService
@attribute [Authorize]

<h3>CreateGoal111</h3>
<br />

<EditForm EditContext="@editContext" OnValidSubmit="GenerateCurrentGoal" style="max-width : 600px">
    <div class="form-group">
        <label for="name">Goal Name</label>
        <InputText id="name" @bind-Value="totalGoalBuilder.Name" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="value">Goal Total Value</label>
        <InputNumber id="value" @bind-Value="totalGoalBuilder.TotalValue" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="unit">Unit</label>
        <InputText id="unit" @bind-Value="totalGoalBuilder.Unit" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="startDate">Start Date</label>
        <InputDate id="startDate" @bind-Value="totalGoalBuilder.StartDate" class="form-control"></InputDate>
    </div>

    <div class="form-group">
        <label for="duration">Duration</label>
        <InputNumber id="duration" @bind-Value="totalGoalBuilder.Duration" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="endDate">End Date</label>
        <InputDate id="endDate" @bind-Value="totalGoalBuilder.EndDate" class="form-control"></InputDate>
    </div>

    <div class="form-group">
        <label for="showTime">Include Time</label>
        <InputCheckbox id="showTime" @bind-Value="IsTimeVisible" class="form-checked"></InputCheckbox>
        <br />
        @if (IsTimeVisible)
        {
            <span>Starting Time </span><InputText type="time" @bind-Value="@totalGoalBuilder.StartTime" />
            <span> Length of session </span><InputText type="time" @bind-Value="@totalGoalBuilder.LengthTime" />
        }
    </div>

    <div class="form-group">
        <label for="week">Days</label><br />
        <InputRadioGroup id="week" @bind-Value="totalGoalBuilder.CalendarValue" class="form-control">
            <InputRadio Value="0" /><span style="padding-left:5px;"> All week</span>
            <InputRadio Value="1" /><span style="padding-left:5px;"> Working days</span>
            <InputRadio Value="2" /><span style="padding-left:5px;"> Custom days</span>
        </InputRadioGroup>
    </div>

    <div class="form-group">
        <label for="monday">
            Monday
            <InputCheckbox disabled="@daysAreDisabled" id="monday" @bind-Value=totalGoalBuilder.Monday class="form-check"></InputCheckbox>
        </label>
        <label for="tuesday">
            Tuesday
            <InputCheckbox disabled="@daysAreDisabled" id="tuesday" @bind-Value=totalGoalBuilder.Tuesday class="form-check"></InputCheckbox>
        </label>
        <label for="wednesday">
            Wednesday
            <InputCheckbox disabled="@daysAreDisabled" id="wednesday" @bind-Value=totalGoalBuilder.Wednesday class="form-check"></InputCheckbox>
        </label>
        <label for="thursday">
            Thursday
            <InputCheckbox disabled="@daysAreDisabled" id="thursday" @bind-Value=totalGoalBuilder.Thursday class="form-check"></InputCheckbox>
        </label>
        <label for="friday">
            Friday
            <InputCheckbox disabled="@daysAreDisabled" id="friday" @bind-Value=totalGoalBuilder.Friday class="form-check"></InputCheckbox>
        </label>
        <label for="saturday">
            Saturday
            <InputCheckbox disabled="@daysAreDisabled" id="saturday" @bind-Value=totalGoalBuilder.Saturday class="form-check"></InputCheckbox>
        </label>
        <label for="sunday">
            Sunday
            <InputCheckbox disabled="@daysAreDisabled" id="sunday" @bind-Value=totalGoalBuilder.Sunday class="form-check"></InputCheckbox>
        </label>
    </div>


    <button style="margin: 8px" type="submit" class="btn btn-primary">Generate plan preview</button>

    @if (isLoadPreviousButtonVissible)
    {
        <button style="margin: 8px" type="button" class="btn btn-secondary" @onclick="() => LoadPreviousPlan()">Load previous plan preview</button>
    }

</EditForm>


<Modal @ref="Modal" editGoalDay="modalGoalDay" isInEdit="isModalInEditMode" OnCreateButtonClicked="createGoalDay" OnDeleteButtonClicked="deleteGoalDay" OnGoalDayChanged="Refresh" OnValueChanged="recalculate"></Modal>


<br />

@if (isCalendarVissible)
{
    currentCalendarDay = firstCalendarDay;
    dayIndex = 0;
    lastPrintedMonth = -1;

    <span style="background-color: navajowhite;">To fullfil goal <b>@goal.Name</b> is planned reach <b>@goal.TotalValue @goal.Unit</b> spread over <b>@goal.Days.Count</b> days.</span>

    <br />

    <table class="table" style="max-width : 1000px">
        <thead>
            <tr>
                <th width="14%">Monday</th>
                <th width="14%">TuesDay</th>
                <th width="14%">Wednesday</th>
                <th width="14%">Thursday</th>
                <th width="14%">Friday</th>
                <th width="14%">Saturday</th>
                <th width="14%">Sunday</th>
            </tr>
        </thead>
        <tbody>
            @while (currentCalendarDay <= endCalendarDay)
            {
                @if (lastPrintedMonth != currentCalendarDay.Month)
                {
                    <tr>
                        <td colspan="7"><h3>@currentCalendarDay.ToString("MMMM yyyy")</h3></td>
                    </tr>
                    lastPrintedMonth = currentCalendarDay.Month;
                }
                <tr>
                    @for (int j = 0; j < 7; j++)
                    {
                        @if (currentCalendarDay < startCalendarDay || currentCalendarDay > endCalendarDay)
                        {
                            <td style="color: grey; font-weight: 200;"> @currentCalendarDay.ToString("dd")</td>
                        }
                        else
                        {
                            DateTime cellCalendarDay = currentCalendarDay;
                            <td style="@GetStyleAndDecideIfIsDayInGoal(currentCalendarDay)" @onclick="() => CellClicked(cellCalendarDay)">
                                <span>@currentCalendarDay.ToString("dd"). </span>
                                @if (isDayInGoal)
                                {
                                    <span style="background-color: navajowhite">@currentGoalDay.Value @goal.Unit </span>
                                    @if (!currentGoalDay.IsAllDay)
                                    {
                                        <br /><span style="font-weight: 300; font-style : italic; align-self : center">@currentGoalDay.StartDate.ToString("HH:mm") - @((currentGoalDay.StartDate + currentGoalDay.LengthTime).ToString("HH:mm"))</span>
                                    }
                                }
                                <br /><span class="note">@currentGoalDay.Note</span>
                            </td>
                        }
                        currentCalendarDay = currentCalendarDay.AddDays(1);
                    }
                </tr>

            }
        </tbody>
    </table>

    <br />
    <button class="btn btn-primary" @onclick="CreateGoalHandler">Create Goal</button>
}



@code {

    private Modal Modal { get; set; }
    private GoalDay modalGoalDay { get; set; } = new GoalDay();
    public bool isModalInEditMode { get; set; }

    private GoalDay currentGoalDay { get; set; } = null;
    private bool isDayInGoal { get; set; }

    private Goal goal { get; set; } = null;
    private Goal previousGoal { get; set; } = null;

    private DateTime firstCalendarDay { get; set; }
    private DateTime startCalendarDay { get; set; }
    private DateTime endCalendarDay { get; set; }

    private DateTime currentCalendarDay { get; set; }

    private int lastPrintedMonth = -1;
    private bool isCalendarVissible = false;
    private bool isLoadPreviousButtonVissible = false;

    private bool daysAreDisabled { get; set; } = true;

    GoalBuilder totalGoalBuilder = new GoalBuilder();

    int dayIndex = 0;

    private EditContext editContext;

    public async void CreateGoalHandler()
    {

        await GoalService.AddGoal(goal);
    }


    private void recalculate(int recalculateMode)
    {
        if (recalculateMode == 0)
        {
            DistributeTotalValueToDays(modalGoalDay);
        }
        else if (recalculateMode == 1)
        {
            RecalcutateTotalValue();
        }
    }


    private void Refresh()
    {
        StateHasChanged();
    }

    private bool IsTimeVisible
    {
        get
        {
            return !totalGoalBuilder.IsAllDay;
        }
        set
        {
            totalGoalBuilder.IsAllDay = !value;
            totalGoalBuilder.StartTime = "00:00:00";
            totalGoalBuilder.LengthTime = "01:00:00";
        }
    }

    private void CellClicked(DateTime currentDay)
    {

        GoalDay tempGoalDay = goal.Days.FirstOrDefault(goalDay => goalDay.StartDate.Date.Equals(currentDay.Date));
        if (tempGoalDay != null)
        {
            modalGoalDay = tempGoalDay;
            isModalInEditMode = true;
            Modal.Open();
        }
        else
        {
            TimeSpan genetaredTime = goal.StartDateGenerated.TimeOfDay;
            modalGoalDay = new GoalDay { IsAllDay = goal.IsAllDayGenerated, StartDate = currentDay.Date + genetaredTime, LengthTime = goal.LengthTimeGenerated };
            isModalInEditMode = false;
            Modal.Open();
        }
    }


    private void createGoalDay()
    {
        goal.Days.Add(modalGoalDay);
        goal.Days.Sort();
    }

    private void deleteGoalDay()
    {
        goal.Days.Remove(modalGoalDay);
    }


    protected override void OnInitialized()
    {
        editContext = new EditContext(totalGoalBuilder);

        editContext.OnFieldChanged += EditContext_OnFieldChanged;
        Console.WriteLine(" OnInitialized() ????????????????????????????");

        base.OnInitialized();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {

        if (e.FieldIdentifier.FieldName == "StartDate")
        {
            totalGoalBuilder.EndDate = totalGoalBuilder.StartDate.AddDays(totalGoalBuilder.Duration - 1);
            Console.WriteLine("zmena start date????????????????????????????");
        }

        else if (e.FieldIdentifier.FieldName == "Duration")
        {
            totalGoalBuilder.EndDate = totalGoalBuilder.StartDate.AddDays(totalGoalBuilder.Duration - 1);
            Console.WriteLine("zmena duration????????????????????????????");
        }

        else if (e.FieldIdentifier.FieldName == "EndDate")
        {
            totalGoalBuilder.Duration = (totalGoalBuilder.EndDate - totalGoalBuilder.StartDate).Days + 1;
        }
        else if (e.FieldIdentifier.FieldName == "CalendarValue")
        {
            if (totalGoalBuilder.CalendarValue == 0)
            {

                daysAreDisabled = true;

                totalGoalBuilder.Monday = true;
                totalGoalBuilder.Tuesday = true;
                totalGoalBuilder.Wednesday = true;
                totalGoalBuilder.Thursday = true;
                totalGoalBuilder.Friday = true;
                totalGoalBuilder.Saturday = true;
                totalGoalBuilder.Sunday = true;
            }

            else if (totalGoalBuilder.CalendarValue == 1)
            {

                daysAreDisabled = true;

                totalGoalBuilder.Monday = true;
                totalGoalBuilder.Tuesday = true;
                totalGoalBuilder.Wednesday = true;
                totalGoalBuilder.Thursday = true;
                totalGoalBuilder.Friday = true;
                totalGoalBuilder.Saturday = false;
                totalGoalBuilder.Sunday = false;
            }

            else
            {
                daysAreDisabled = false;
            }
        }

    }


    private void GenerateCurrentGoal()
    {
        previousGoal = goal;

        if (previousGoal != null)
        {
            isLoadPreviousButtonVissible = true;
        }

        goal = new Goal();
        goal.Name = (String)totalGoalBuilder.Name.Clone();


        startCalendarDay = totalGoalBuilder.StartDate;

        lastPrintedMonth = -1;
        var startDayNumber = (int)startCalendarDay.DayOfWeek;
        startDayNumber = startDayNumber == 0 ? 7 : startDayNumber;

        firstCalendarDay = startCalendarDay.AddDays(-startDayNumber + 1);
        endCalendarDay = totalGoalBuilder.EndDate;

        currentCalendarDay = totalGoalBuilder.StartDate;

        TimeSpan StartTime = TimeSpan.FromHours(0);
        TimeSpan LocalLenght;
        TimeSpan.TryParseExact(totalGoalBuilder.StartTime, "hh\\:mm\\:ss", null, out StartTime);
        TimeSpan.TryParseExact(totalGoalBuilder.LengthTime, "hh\\:mm\\:ss", null, out LocalLenght);

        goal.IsAllDayGenerated = totalGoalBuilder.IsAllDay;
        goal.StartDateGenerated = currentCalendarDay + StartTime;
        goal.LengthTimeGenerated = LocalLenght;
        goal.TotalValue = totalGoalBuilder.TotalValue;
        goal.Unit = totalGoalBuilder.Unit;

        while (currentCalendarDay <= totalGoalBuilder.EndDate)
        {
            PropertyInfo pinfo = typeof(GoalBuilder).GetProperty(currentCalendarDay.DayOfWeek.ToString());
            if ((bool)pinfo.GetValue(totalGoalBuilder, null))
            {
                goal.Days.Add(new GoalDay { StartDate = currentCalendarDay + StartTime, LengthTime = LocalLenght, IsAllDay = totalGoalBuilder.IsAllDay });
            }
            currentCalendarDay = currentCalendarDay.AddDays(1);
        }

        int Value = totalGoalBuilder.TotalValue / goal.Days.Count;
        int RestofValue = totalGoalBuilder.TotalValue % goal.Days.Count;
        DistributeTotalValueToDays(null);

        isCalendarVissible = true;
    }

    private void DistributeTotalValueToDays(GoalDay excludedday)
    {
        int totalValue = goal.TotalValue;
        int daysCount = goal.Days.Count;

        if (excludedday != null)
        {
            totalValue -= excludedday.Value;
            daysCount--;
        }

        int Value = totalValue / daysCount;
        int RestofValue = totalValue % daysCount;

        foreach (GoalDay day in goal.Days)
        {
            if (day != excludedday)
            {
                day.Value = Value;
            }
        }
        int i = 0;
        while (RestofValue > 0)
        {
            if (goal.Days[i] != excludedday)
            {
                goal.Days[i].Value++;
                RestofValue--;
            }
            i++;
        }
    }

    private void RecalcutateTotalValue()
    {
        int totalValue = 0;

        foreach (GoalDay day in goal.Days)
        {
            totalValue += day.Value;
        }

        goal.TotalValue = totalValue;
    }



    private string GetStyleAndDecideIfIsDayInGoal(DateTime currentCalendarDay)
    {
        if (dayIndex == goal.Days.Count)
        {
            isDayInGoal = false;
            return "border: 2px dashed black; font-weight: 400;cursor: pointer;";
        }

        currentGoalDay = goal.Days.ElementAt(dayIndex);
        //Console.WriteLine("note:" + currentGoalDay.Note);

        if (currentGoalDay.StartDate.Date == currentCalendarDay.Date)
        {
            isDayInGoal = true;
            dayIndex++;
            return "border: 2px solid black; background-color: PaleGreen; font-weight: 600; cursor: pointer;";
        }

        isDayInGoal = false;
        return "border: 2px dashed black; font-weight: 400;cursor: pointer;";
    }


    private void LoadPreviousPlan()
    {
        Goal tempGoal = goal;
        goal = previousGoal;
        previousGoal = tempGoal;

        startCalendarDay = goal.Days.ElementAt(0).StartDate;

        var startDayNumber = (int)startCalendarDay.DayOfWeek;
        startDayNumber = startDayNumber == 0 ? 7 : startDayNumber;

        firstCalendarDay = startCalendarDay.AddDays(-startDayNumber + 1);
        endCalendarDay = goal.Days.ElementAt(goal.Days.Count - 1).StartDate;
    }

}


