@page "/creategoal"
@attribute [Authorize]

<h3>CreateGoal111</h3>
<br />



<EditForm EditContext="@editContext" OnValidSubmit="CreateCurrentGoal" style="max-width : 600px">
    <div class="form-group">
        <label for="name">Goal Name</label>
        <InputText id="name" @bind-Value="totalGoalBuilder.Name" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="startDate">Start Date</label>
        <InputDate id="startDate" @bind-Value="totalGoalBuilder.StartDate" class="form-control"></InputDate>
    </div>

    <div class="form-group">
        <label for="duration">Duration</label>
        <InputNumber id="duration" @bind-Value="totalGoalBuilder.Duration" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="endDate">End Date</label>
        <InputDate id="endDate" @bind-Value="totalGoalBuilder.EndDate" class="form-control"></InputDate>

    </div>

    <div class="form-group">
        <label for="showTime">Include Time</label>
        <InputCheckbox id="showTime" @bind-Value="IsTimeVisible" class="form-checked"></InputCheckbox>
        <br />
        @if (IsTimeVisible)
        {
            <span>Starting Time </span><InputText type="time" @bind-Value="@totalGoalBuilder.Time" />
            <span>Length of session </span><InputText type="time" @bind-Value="@totalGoalBuilder.Length" />

        }
    </div>


    <div class="form-group">
        <label for="week">Days</label><br />
        <InputRadioGroup id="week" @bind-Value="totalGoalBuilder.CalendarValue" class="form-control">
            <InputRadio Value="0" /><span style="padding-left:5px;"> All days</span>
            <InputRadio Value="1" /><span style="padding-left:5px;"> Working Days</span>
            <InputRadio Value="2" /><span style="padding-left:5px;"> Custom</span>
        </InputRadioGroup>
    </div>

    <div class="form-group">
        <label for="monday">
            Monday
            <InputCheckbox disabled="@daysAreDisabled" id="monday" @bind-Value=totalGoalBuilder.Monday class="form-check"></InputCheckbox>
        </label>
        <label for="tuesday">
            Tuesday
            <InputCheckbox disabled="@daysAreDisabled" id="tuesday" @bind-Value=totalGoalBuilder.Tuesday class="form-check"></InputCheckbox>
        </label>
        <label for="wednesday">
            Wednesday
            <InputCheckbox disabled="@daysAreDisabled" id="wednesday" @bind-Value=totalGoalBuilder.Wednesday class="form-check"></InputCheckbox>
        </label>
        <label for="thursday">
            Thursday
            <InputCheckbox disabled="@daysAreDisabled" id="thursday" @bind-Value=totalGoalBuilder.Thursday class="form-check"></InputCheckbox>
        </label>
        <label for="friday">
            Friday
            <InputCheckbox disabled="@daysAreDisabled" id="friday" @bind-Value=totalGoalBuilder.Friday class="form-check"></InputCheckbox>
        </label>
        <label for="saturday">
            Saturday
            <InputCheckbox disabled="@daysAreDisabled" id="saturday" @bind-Value=totalGoalBuilder.Saturday class="form-check"></InputCheckbox>
        </label>
        <label for="sunday">
            Sunday
            <InputCheckbox disabled="@daysAreDisabled" id="sunday" @bind-Value=totalGoalBuilder.Sunday class="form-check"></InputCheckbox>
        </label>
    </div>



    <button style="margin: 8px" type="submit" class="btn btn-primary">Generate plan preview</button>

    @if (isLoadPreviousButtonVissible)
    {
        <button style="margin: 8px" type="button" class="btn btn-secondary" @onclick="() => LoadPreviousPlan()">Load previous plan preview</button>
    }

</EditForm>


<Modal @ref="Modal" editGoalDay="modalGoalDay"></Modal>



<br />

@if (isCalendarVissible)
{
    currentCalendarDay = firstCalendarDay;
    dayIndex = 0;


    <snan style="background-color: navajowhite;">To fullfil goal <b>@goal.Name</b> was generated <b>@goal.Days.Count</b> active days. Time: @totalGoalBuilder.Time</snan>

    <br />

    <table class="table" style="max-width : 1000px">
        <thead>
            <tr>
                <th width="14%">Monday</th>
                <th width="14%">TuesDay</th>
                <th width="14%">Wednesday</th>
                <th width="14%">Thursday</th>
                <th width="14%">Friday</th>
                <th width="14%">Saturday</th>
                <th width="14%">Sunday</th>
            </tr>
        </thead>
        <tbody>
            @while (currentCalendarDay <= endCalendarDay)
            {
                @if (lastPrintedMonth != currentCalendarDay.Month)
                {
                    <tr>
                        <td colspan="7"><h3>@currentCalendarDay.ToString("MMMM yyyy")</h3></td>
                    </tr>
                    lastPrintedMonth = currentCalendarDay.Month;
                }
                <tr>
                    @for (int j = 0; j < 7; j++)
                    {
                        @if (currentCalendarDay < startCalendarDay || currentCalendarDay > endCalendarDay)
                        {
                            <td style="color: grey; font-weight: 200;"> @currentCalendarDay.ToString("dd")</td>
                        }
                        else
                        {
                            DateTime cellCalendarDay = currentCalendarDay;
                            <td style="@GetStyle(currentCalendarDay)" @onclick="() =>CellClicked(cellCalendarDay)"> @currentCalendarDay.ToString("dd") </td>
                        }
                        currentCalendarDay = currentCalendarDay.AddDays(1);
                    }
                </tr>

            }
        </tbody>
    </table>


}



@code {

    private bool IsTimeVisible
    {
        get
        {
            return !totalGoalBuilder.IsWholeDay;
        }
        set
        {
            totalGoalBuilder.IsWholeDay = !value;
            totalGoalBuilder.Time = "00:00:00";
            totalGoalBuilder.Length = "01:00:00";
        }
    }


    private Modal Modal { get; set; }
    private GoalDay modalGoalDay { get; set; } = new GoalDay();

    private Goal goal { get; set; } = null;
    private Goal previousGoal { get; set; } = null;

    private DateTime firstCalendarDay { get; set; }
    private DateTime startCalendarDay { get; set; }
    private DateTime endCalendarDay { get; set; }

    private DateTime currentCalendarDay { get; set; }

    private int lastPrintedMonth = -1;
    private bool isCalendarVissible = false;
    private bool isLoadPreviousButtonVissible = false;



    private bool daysAreDisabled { get; set; } = true;

    GoalBuilder totalGoalBuilder = new GoalBuilder();

    int dayIndex = 0;


    private EditContext editContext;


    private void CellClicked(DateTime currentDay)
    {

        modalGoalDay = goal.Days.First(goalDay => goalDay.StartTime.ToShortDateString().Equals(currentDay.ToShortDateString()));

        Modal.Open();
    }


    protected override void OnInitialized()
    {
        editContext = new EditContext(totalGoalBuilder);

        editContext.OnFieldChanged += EditContext_OnFieldChanged;
        Console.WriteLine(" OnInitialized() ????????????????????????????");

        base.OnInitialized();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {

        if (e.FieldIdentifier.FieldName == "StartDate")
        {
            totalGoalBuilder.EndDate = totalGoalBuilder.StartDate.AddDays(totalGoalBuilder.Duration);
            Console.WriteLine("zmena start date????????????????????????????");
        }

        else if (e.FieldIdentifier.FieldName == "Duration")
        {
            totalGoalBuilder.EndDate = totalGoalBuilder.StartDate.AddDays(totalGoalBuilder.Duration);
            Console.WriteLine("zmena duration????????????????????????????");
        }

        else if (e.FieldIdentifier.FieldName == "EndDate")
        {
            totalGoalBuilder.Duration = (totalGoalBuilder.EndDate - totalGoalBuilder.StartDate).Days;
        }
        else if (e.FieldIdentifier.FieldName == "CalendarValue")
        {
            if (totalGoalBuilder.CalendarValue == 0)
            {

                daysAreDisabled = true;

                totalGoalBuilder.Monday = true;
                totalGoalBuilder.Tuesday = true;
                totalGoalBuilder.Wednesday = true;
                totalGoalBuilder.Thursday = true;
                totalGoalBuilder.Friday = true;
                totalGoalBuilder.Saturday = true;
                totalGoalBuilder.Sunday = true;
            }

            else if (totalGoalBuilder.CalendarValue == 1)
            {

                daysAreDisabled = true;

                totalGoalBuilder.Monday = true;
                totalGoalBuilder.Tuesday = true;
                totalGoalBuilder.Wednesday = true;
                totalGoalBuilder.Thursday = true;
                totalGoalBuilder.Friday = true;
                totalGoalBuilder.Saturday = false;
                totalGoalBuilder.Sunday = false;
            }
            else
            {
                daysAreDisabled = false;
            }
        }

    }


    private void CreateCurrentGoal()
    {
        previousGoal = goal;

        if (previousGoal != null)
        {
            isLoadPreviousButtonVissible = true;
        }

        goal = new Goal();
        goal.Name = "Some name";

        TimeSpan LocalTime = TimeSpan.FromHours(0);
        TimeSpan.TryParseExact(totalGoalBuilder.Time, "hh\\:mm\\:ss", null, out LocalTime);

        startCalendarDay = totalGoalBuilder.StartDate;

        lastPrintedMonth = -1;
        var startDayNumber = (int)startCalendarDay.DayOfWeek;
        startDayNumber = startDayNumber == 0 ? 7 : startDayNumber;

        firstCalendarDay = startCalendarDay.AddDays(-startDayNumber + 1);
        endCalendarDay = totalGoalBuilder.EndDate;

        currentCalendarDay = totalGoalBuilder.StartDate;


        while (currentCalendarDay <= totalGoalBuilder.EndDate)
        {
            PropertyInfo pinfo = typeof(GoalBuilder).GetProperty(currentCalendarDay.DayOfWeek.ToString());
            if ((bool)pinfo.GetValue(totalGoalBuilder, null))
            {
                goal.Days.Add(new GoalDay { StartTime = currentCalendarDay + LocalTime });
            }
            currentCalendarDay = currentCalendarDay.AddDays(1);
            goal.Name = (String)totalGoalBuilder.Name.Clone();

        }

        isCalendarVissible = true;

    }


    private string GetStyle(DateTime currentCalendarDay)
    {
        if (dayIndex == goal.Days.Count)
        {
            return "border: 2px dashed black; font-weight: 400;cursor: pointer;";
        }

        GoalDay currentGoalDay = goal.Days.ElementAt(dayIndex);
        //Console.WriteLine("note:" + currentGoalDay.Note);

        if (currentGoalDay.StartTime.ToShortDateString() == currentCalendarDay.ToShortDateString())
        {
            dayIndex++;
            return "border: 2px solid black; background-color: PaleGreen; font-weight: 600; cursor: pointer;";
        }
        return "border: 2px dashed black; font-weight: 400;cursor: pointer;";

    }


    private void LoadPreviousPlan()
    {
        goal = previousGoal;

        startCalendarDay = goal.Days.ElementAt(0).StartTime;

        var startDayNumber = (int)startCalendarDay.DayOfWeek;
        startDayNumber = startDayNumber == 0 ? 7 : startDayNumber;


        firstCalendarDay = startCalendarDay.AddDays(-startDayNumber + 1);
        endCalendarDay = goal.Days.ElementAt(goal.Days.Count - 1).StartTime;
    }

}


