@page "/creategoal"
@attribute [Authorize]

<h3>CreateGoal111</h3>
<br />

<EditForm EditContext="@editContext" OnValidSubmit="GenerateCurrentGoal" style="max-width : 600px">
    <div class="form-group">
        <label for="name">Goal Name</label>
        <InputText id="name" @bind-Value="totalGoalBuilder.Name" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="value">Goal Total Value</label>
        <InputNumber id="value" @bind-Value="totalGoalBuilder.TotalValue" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="unit">Unit</label>
        <InputText id="unit" @bind-Value="totalGoalBuilder.Unit" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="startDate">Start Date</label>
        <InputDate id="startDate" @bind-Value="totalGoalBuilder.StartDate" class="form-control"></InputDate>
    </div>

    <div class="form-group">
        <label for="duration">Duration</label>
        <InputNumber id="duration" @bind-Value="totalGoalBuilder.Duration" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="endDate">End Date</label>
        <InputDate id="endDate" @bind-Value="totalGoalBuilder.EndDate" class="form-control"></InputDate>
    </div>

    <div class="form-group">
        <label for="showTime">Include Time</label>
        <InputCheckbox id="showTime" @bind-Value="IsTimeVisible" class="form-checked"></InputCheckbox>
        <br />
        @if (IsTimeVisible)
        {
            <span>Starting Time </span><InputText type="time" @bind-Value="@totalGoalBuilder.StartTime" />
            <span> Length of session </span><InputText type="time" @bind-Value="@totalGoalBuilder.LengthTime" />
        }
    </div>

    <div class="form-group">
        <label for="week">Days</label><br />
        <InputRadioGroup id="week" @bind-Value="totalGoalBuilder.CalendarValue" class="form-control">
            <InputRadio Value="0" /><span style="padding-left:5px;"> All week</span>
            <InputRadio Value="1" /><span style="padding-left:5px;"> Working days</span>
            <InputRadio Value="2" /><span style="padding-left:5px;"> Custom days</span>
        </InputRadioGroup>
    </div>

    <div class="form-group">
        <label for="monday">
            Monday
            <InputCheckbox disabled="@daysAreDisabled" id="monday" @bind-Value=totalGoalBuilder.Monday class="form-check"></InputCheckbox>
        </label>
        <label for="tuesday">
            Tuesday
            <InputCheckbox disabled="@daysAreDisabled" id="tuesday" @bind-Value=totalGoalBuilder.Tuesday class="form-check"></InputCheckbox>
        </label>
        <label for="wednesday">
            Wednesday
            <InputCheckbox disabled="@daysAreDisabled" id="wednesday" @bind-Value=totalGoalBuilder.Wednesday class="form-check"></InputCheckbox>
        </label>
        <label for="thursday">
            Thursday
            <InputCheckbox disabled="@daysAreDisabled" id="thursday" @bind-Value=totalGoalBuilder.Thursday class="form-check"></InputCheckbox>
        </label>
        <label for="friday">
            Friday
            <InputCheckbox disabled="@daysAreDisabled" id="friday" @bind-Value=totalGoalBuilder.Friday class="form-check"></InputCheckbox>
        </label>
        <label for="saturday">
            Saturday
            <InputCheckbox disabled="@daysAreDisabled" id="saturday" @bind-Value=totalGoalBuilder.Saturday class="form-check"></InputCheckbox>
        </label>
        <label for="sunday">
            Sunday
            <InputCheckbox disabled="@daysAreDisabled" id="sunday" @bind-Value=totalGoalBuilder.Sunday class="form-check"></InputCheckbox>
        </label>
    </div>


    <button style="margin: 8px" type="submit" class="btn btn-primary">Generate plan preview</button>

    @if (isLoadPreviousButtonVissible)
    {
        <button style="margin: 8px" type="button" class="btn btn-secondary" @onclick="() => LoadPreviousPlan()">Load previous plan preview</button>
    }

</EditForm>
<br />


<EditGoal @ref="editGoal" goal="goal" isInEdit="false" isInCheck="false" onCloseChanges="stub"></EditGoal>


@code {


    private EditGoal editGoal { get; set; }

    private DateTime currentCalendarDay { get; set; }

    private Goal goal { get; set; } = null;
    private Goal previousGoal { get; set; } = null;

    private bool isLoadPreviousButtonVissible = false;

    private bool daysAreDisabled { get; set; } = true;

    GoalBuilder totalGoalBuilder = new GoalBuilder();

    private EditContext editContext;

    private void stub() {

    }

    private bool IsTimeVisible
    {
        get
        {
            return !totalGoalBuilder.IsAllDay;
        }
        set
        {
            totalGoalBuilder.IsAllDay = !value;
            totalGoalBuilder.StartTime = "00:00:00";
            totalGoalBuilder.LengthTime = "01:00:00";
        }
    }


    protected override void OnInitialized()
    {
        editContext = new EditContext(totalGoalBuilder);

        editContext.OnFieldChanged += EditContext_OnFieldChanged;
        Console.WriteLine(" OnInitialized() ????????????????????????????");

        base.OnInitialized();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {

        if (e.FieldIdentifier.FieldName == "StartDate")
        {
            totalGoalBuilder.EndDate = totalGoalBuilder.StartDate.AddDays(totalGoalBuilder.Duration - 1);
            Console.WriteLine("zmena start date????????????????????????????");
        }

        else if (e.FieldIdentifier.FieldName == "Duration")
        {
            totalGoalBuilder.EndDate = totalGoalBuilder.StartDate.AddDays(totalGoalBuilder.Duration - 1);
            Console.WriteLine("zmena duration????????????????????????????");
        }

        else if (e.FieldIdentifier.FieldName == "EndDate")
        {
            totalGoalBuilder.Duration = (totalGoalBuilder.EndDate - totalGoalBuilder.StartDate).Days + 1;
        }
        else if (e.FieldIdentifier.FieldName == "CalendarValue")
        {
            if (totalGoalBuilder.CalendarValue == 0)
            {

                daysAreDisabled = true;

                totalGoalBuilder.Monday = true;
                totalGoalBuilder.Tuesday = true;
                totalGoalBuilder.Wednesday = true;
                totalGoalBuilder.Thursday = true;
                totalGoalBuilder.Friday = true;
                totalGoalBuilder.Saturday = true;
                totalGoalBuilder.Sunday = true;
            }

            else if (totalGoalBuilder.CalendarValue == 1)
            {

                daysAreDisabled = true;

                totalGoalBuilder.Monday = true;
                totalGoalBuilder.Tuesday = true;
                totalGoalBuilder.Wednesday = true;
                totalGoalBuilder.Thursday = true;
                totalGoalBuilder.Friday = true;
                totalGoalBuilder.Saturday = false;
                totalGoalBuilder.Sunday = false;
            }

            else
            {
                daysAreDisabled = false;
            }
        }

    }


    private void GenerateCurrentGoal()
    {
        previousGoal = goal;

        if (previousGoal != null)
        {
            isLoadPreviousButtonVissible = true;
        }

        goal = new Goal();
        goal.Name = (String)totalGoalBuilder.Name.Clone();

        TimeSpan StartTime = TimeSpan.FromHours(0);
        TimeSpan LocalLenght;
        TimeSpan.TryParseExact(totalGoalBuilder.StartTime, "hh\\:mm\\:ss", null, out StartTime);
        TimeSpan.TryParseExact(totalGoalBuilder.LengthTime, "hh\\:mm\\:ss", null, out LocalLenght);

        currentCalendarDay = totalGoalBuilder.StartDate;

        goal.IsAllDayGenerated = totalGoalBuilder.IsAllDay;
        goal.StartDateGenerated = currentCalendarDay + StartTime;
        goal.LengthTimeGenerated = LocalLenght;
        goal.TotalValue = totalGoalBuilder.TotalValue;
        goal.Unit = totalGoalBuilder.Unit;


        while (currentCalendarDay <= totalGoalBuilder.EndDate)
        {
            PropertyInfo pinfo = typeof(GoalBuilder).GetProperty(currentCalendarDay.DayOfWeek.ToString());
            if ((bool)pinfo.GetValue(totalGoalBuilder, null))
            {
                goal.Days.Add(new GoalDay { StartDate = currentCalendarDay + StartTime, LengthTime = LocalLenght, IsAllDay = totalGoalBuilder.IsAllDay });
            }
            currentCalendarDay = currentCalendarDay.AddDays(1);
        }

        int Value = totalGoalBuilder.TotalValue / goal.Days.Count;
        int RestofValue = totalGoalBuilder.TotalValue % goal.Days.Count;
    }


    private void LoadPreviousPlan()
    {
        Goal tempGoal = goal;
        goal = previousGoal;
        previousGoal = tempGoal;
        //editGoal.InitializeCalendar();
    }


}


