@page "/currentgoal"
@inject IGoalService GoalService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<h3>CurrentGoal</h3>
@if (isInCheckSwitch)
{
    <button class="btn btn-light" @onclick="showGoalEdit">[Edit Goal]</button>
    <button class="btn btn-light" @onclick="ExportCalendar">[Export Calendar]</button>
}
else
{
    //<button class="btn btn-light" @onclick="showGoalCheck">[Close Edit]</ button > edit multiple will not be swithech off
}

<br />
<EditGoal @ref="editGoal" goal="@activeGoal" isInCheck="@isInCheckSwitch" isInEdit="true" onCloseChanges="showGoalCheck"></EditGoal>



<!--
<div id="divCheckbox" hidden="@isEditHidden">
    <EditGoal @ref="editGoal" goal="GoalService.CurrentGoal" isInCheck="false" isInEdit="true"></EditGoal>
</div>
-->

@code {

    public Goal activeGoal { get; set; }

    private EditGoal editGoal { get; set; }
    public Goal goal { get; set; }
    //private bool isEditHidden { get; set; } = true;
    public bool isInCheckSwitch { get; set; } = true;

    /*
    protected void exportCalendat()
    {
        GoalService.ExportCalendarAsync(activeGoal);
    }
    */

    public async void ExportCalendar()

    {
        String calendar = GoalService.PrepareCalenderExport(activeGoal);
        byte[] file = System.Text.Encoding.UTF8.GetBytes(calendar);
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "calendarExport.txt", "text/plain", file);        
    }


    protected override void OnInitialized()
    {
        activeGoal = GoalService.CurrentGoal;
    }

    private void showGoalEdit()
    {
        //isEditHidden = false;

        copyCurrentGoalToTempGoal();
        activeGoal = GoalService.TempGoal;
        isInCheckSwitch = false;

    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("neco");
        if (activeGoal == null)
        {
            //NavigationManager.NavigateTo("dashboard");
            activeGoal = GoalService.CurrentGoal;
        }
    }

    private void showGoalCheck()
    {
        activeGoal = GoalService.CurrentGoal;
        isInCheckSwitch = true;
    }

    private void copyCurrentGoalToTempGoal()
    {
        GoalService.TempGoal = new Goal();
        GoalService.TempGoal.Id = GoalService.CurrentGoal.Id;
        GoalService.TempGoal.Name = GoalService.CurrentGoal.Name;
        GoalService.TempGoal.IsAllDayGenerated = GoalService.CurrentGoal.IsAllDayGenerated;
        GoalService.TempGoal.LengthTimeGenerated = GoalService.CurrentGoal.LengthTimeGenerated;
        GoalService.TempGoal.StartDateGenerated = GoalService.CurrentGoal.StartDateGenerated;
        GoalService.TempGoal.Unit = GoalService.CurrentGoal.Unit;
        GoalService.TempGoal.UserId = GoalService.CurrentGoal.UserId;
        GoalService.TempGoal.TotalValue = GoalService.CurrentGoal.TotalValue;
        GoalService.TempGoal.StartDateGenerated = GoalService.CurrentGoal.StartDateGenerated;


        foreach (GoalDay goalDay in GoalService.CurrentGoal.Days)
        {
            GoalService.TempGoal.Days.Add(copyCurrentDay(goalDay));
        }

    }

    private GoalDay copyCurrentDay(GoalDay currentGoalDay)
    {
        GoalDay goalDaya = new GoalDay();
        goalDaya.Id = currentGoalDay.Id;
        goalDaya.GoalId = currentGoalDay.GoalId;
        goalDaya.IsAllDay = currentGoalDay.IsAllDay;
        goalDaya.LengthTime = currentGoalDay.LengthTime;
        goalDaya.Note = currentGoalDay.Note;
        goalDaya.StartDate = currentGoalDay.StartDate;
        goalDaya.Value = currentGoalDay.Value;
        goalDaya.CheckedValue = currentGoalDay.CheckedValue;
        return goalDaya;

    }



}

