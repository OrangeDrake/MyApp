@inject IGoalService GoalService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;

@attribute [Authorize]

@if (!isInCheck)
{
    @if (!isInEditMultiple && !isInCreateMultiple)
    {
        <button class="btn btn-primary" @onclick="showEditMultiple">Edit multiple days</button>
        <button class="btn btn-primary" @onclick="showCreateMultiple">Crete multiple days</button>
    }
    else if (isInEditMultiple)
    {
        <button class="btn btn-secondary" @onclick="closeEditMultiple">Cancel Editing multiple days</button>
    }
    else if (isInCreateMultiple)
    {
        <button class="btn btn-secondary" @onclick="closeCreateMultiple">Cancel Creating multiple days</button>
    }
    <br />

}


@if (isCalendarVisible)
{




    <span style="background-color: navajowhite;">To fullfil goal <b>@goal.Name</b> is planned reach <b>@goal.TotalValue @goal.Unit</b> spread over <b>@goal.Days.Count</b> days.</span>

    <br />

    currentCalendarDay = firstCalendarDay;
    dayIndex = 0;
    lastPrintedMonth = -1;
    cumulativeValue = 0;

    lastCheckedValue = 0;
    cumulativeValues = new List<int>();
    checkedValues = new List<int?>();
    dates = new List<String>();
    int i = 0;


    <table class="table" style="max-width : 1000px">
        <thead>
            <tr>
                <th width="14%">Monday</th>
                <th width="14%">TuesDay</th>
                <th width="14%">Wednesday</th>
                <th width="14%">Thursday</th>
                <th width="14%">Friday</th>
                <th width="14%">Saturday</th>
                <th width="14%">Sunday</th>
            </tr>
        </thead>
        <tbody>

            @while (currentCalendarDay <= endCalendarDay)
            {
                @if (lastPrintedMonth != currentCalendarDay.Month)
                {
                    <tr>
                        <td colspan="7"><h3>@currentCalendarDay.ToString("MMMM yyyy")</h3></td>
                    </tr>
                    lastPrintedMonth = currentCalendarDay.Month;
                }
                <tr>
                    @for (int j = 0; j < 7; j++)
                    {
                        @if (currentCalendarDay < startCalendarDay || currentCalendarDay > endCalendarDay)
                        {
                            <td style="color: grey; font-weight: 200;"> @currentCalendarDay.ToString("dd")</td>
                        }
                        else
                        {
                            DateTime cellCalendarDay = currentCalendarDay;
                            Tuple<string, int> styleAndCumulativeValue = GetStyleCumulativeValueAndDecideIfIsDayInGoal(currentCalendarDay);
                            String currentCellStyle = styleAndCumulativeValue.Item1;
                            int currentCellCumulativeValue = styleAndCumulativeValue.Item2;

                            <td style=@currentCellStyle @onclick="() => CellClicked(cellCalendarDay,currentCellCumulativeValue)">
                                <span>@currentCalendarDay.ToString("dd"). </span>
                                @if (isDayInGoal)
                                {

                                    <span style="background-color: navajowhite">@currentGoalDay.Value/@cumulativeValue @goal.Unit </span>
                                    @if (!currentGoalDay.IsAllDay)
                                    {
                                        <br /><span style="font-weight: 300; font-style : italic; align-self : center">@currentGoalDay.StartDate.ToString("HH:mm") - @((currentGoalDay.StartDate + currentGoalDay.LengthTime).ToString("HH:mm"))</span>
                                    }
                                    <div class="note">@currentGoalDay.Note</div>
                                    <div class="note">@currentGoalDay.CheckedValue</div>
                                }

                                @if (isDayInGoal && isInEditMultiple)
                                {
                                    int iCopy = i;
                                    i++;

                                    <input type="checkbox" checked=@checkboxesChecked[iCopy]
                                           @onchange="eventArgs => { CheckboxClicked(iCopy, eventArgs.Value); }" /> <br />
                                }
                                else if (!isDayInGoal && isInCreateMultiple)
                                {
                                    int iCopy = i;
                                    i++;

                                    <input type="checkbox" checked=@checkboxesCheckedCreate[iCopy]
                                           @onchange="eventArgs => {CheckboxCreateClicked(iCopy, eventArgs.Value); }" /> <br />
                                }
                                else if (isInCreateMultiple) // for creating multiple day we counl all days, not only days possible to create(for editing multiple we count only days possible to edit)
                                {
                                    i++;
                                }


                            </td>

                        }
                        currentCalendarDay = currentCalendarDay.AddDays(1);
                    }
                </tr>

            }
        </tbody>
    </table>

    @if (isInEditMultiple && checkboxesChecked.Contains(true))
    {
        <button class="btn btn-primary" @onclick="editMultiple">Modify selected days</button>
    }

    <br />


    @if (isInCreateMultiple && checkboxesCheckedCreate.Contains(true))
    {
        <button class="btn btn-primary" @onclick="createMultiple">Create selected days</button>
    }

    <br />

    @if (!isInCheck)
    {
        <EditForm Model="@mvB" OnValidSubmit=" MoveBoundaries" style="max-width : 600px">
            <div class="form-group">
                <label for="startDate">Start Date</label>
                <InputDate id="startDate" @bind-Value="mvB.startCalendarDay" class="form-control"></InputDate>
            </div>

            <div class="form-group">
                <label for="startDate">End Date</label>
                <InputDate id="startDate" @bind-Value="mvB.endCalendarDay" class="form-control"></InputDate>
            </div>
            <button style="margin: 8px" type="submit" class="btn btn-primary">Move boundaries</button>
        </EditForm>
        <br />
    }

    @if (!isInCheck)
    {
        @if (isInEdit)
        {
            <button class="btn btn-primary" @onclick="SaveChangesHandler">Save Changes</button>
            <button class="btn btn-secondary" @onclick="CloseChangesHandler">Close Changes</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="CreateGoalHandler">Create Goal</button>
        }
        @if (isInCheck)
        {
            <div>Is in Check</div>
        }
    }

    <div id="graph-container" style="max-width:1000px">
        <canvas id="myChart"></canvas>
    </div>


}

<Modal @ref="Modal" editGoalDay="modalGoalDay" isInEdit="isModalInEditMode" OnCreateButtonClicked="createGoalDay" OnDeleteButtonClicked="deleteGoalDay" OnGoalDayChanged="Refresh" OnValueChanged="@((args)=> recalculate(args.Item1,args.Item2,args.Item3,args.Item4))"></Modal>
<ModalCheck @ref="ModalCheck" checkGoalDay="modalGoalDay" checkCumulativeValue="modalCumulativeValue" OnGoalDayChanged="Refresh"></ModalCheck>


@code {

    [Inject] IToastService _toastService { get; set; }

    [Parameter]
    public bool isInCheck { get; set; }

    [Parameter]
    public bool isInEdit { get; set; }
    [Parameter]
    public Goal goal { get; set; } = null;
    [Parameter]
    public EventCallback onCloseChanges { get; set; }

    // Goal originalGoal { get; set; }

    private bool isCalendarVisible { get; set; } = false;
    private DateTime currentCalendarDay { get; set; }

    private DateTime firstCalendarDay { get; set; }
    private DateTime startCalendarDay { get; set; }
    private DateTime endCalendarDay { get; set; }
    private DateTime startCalendarDayMax { get; set; }
    private DateTime endCalendarDayMin { get; set; }
    MoveBoundaries mvB = new MoveBoundaries();

    private GoalDay currentGoalDay { get; set; } = null;
    private bool isDayInGoal { get; set; }

    int? lastCheckedValue = 0;
    int cumulativeValue = 0;
    int modalCumulativeValue = 0;

    private int lastPrintedMonth = -1;
    int dayIndex = 0;

    private Modal Modal { get; set; }
    private ModalCheck ModalCheck { get; set; }

    private GoalDay modalGoalDay { get; set; } = new GoalDay();
    public bool isModalInEditMode { get; set; }

    List<int> cumulativeValues = new List<int>();
    List<int?> checkedValues = new List<int?>();
    List<String> dates = new List<String>();

    bool[] checkboxesChecked;
    bool[] checkboxesCheckedCreate;
    bool isInEditMultiple = false;
    bool isInCreateMultiple = false;


    private void showEditMultiple()
    {
        isInEditMultiple = true;
    }

    private void closeEditMultiple()
    {
        isInEditMultiple = false;
    }


    private void showCreateMultiple()
    {
        isInCreateMultiple = true;
        var numberOfPrintedDays = (endCalendarDay - firstCalendarDay).Days + 1;
        //Console.WriteLine("numberOfPrintedDays: " + numberOfPrintedDays);
        checkboxesCheckedCreate = new bool[numberOfPrintedDays];
    }

    private void closeCreateMultiple()
    {
        isInCreateMultiple = false;
        checkboxesCheckedCreate = null;
    }

    public void CheckboxClicked(int i, object aChecked)
    {
        if ((bool)aChecked)
        {
            checkboxesChecked[i] = true;
        }
        else
        {
            checkboxesChecked[i] = false;
        }

        StateHasChanged();
    }


    public void CheckboxCreateClicked(int i, object aChecked)
    {
        if ((bool)aChecked)
        {
            checkboxesCheckedCreate[i] = true;
        }
        else
        {
            checkboxesCheckedCreate[i] = false;
        }

        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (goal == null)
        {
            return;
        }

        if (!isInEdit)
        {
            await JSRuntime.InvokeVoidAsync("drawChart", dates, cumulativeValues);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("drawChart", dates, cumulativeValues);
            await JSRuntime.InvokeVoidAsync("addCheckedValues", checkedValues);
        }



        /*
        if (firstRender && goal != null)
        //if(firstRender)
        {
            await JSRuntime.InvokeVoidAsync("drawChart", dates, cumulativeValues, checkedValues);

        }

        else if (firstRenderAfterEdit)
        {

            await JSRuntime.InvokeVoidAsync("drawChart", dates, cumulativeValues, checkedValues);
            firstRenderAfterEdit = false;
        }
        */

    }

    private void MoveBoundaries()
    {
        if (mvB.startCalendarDay <= startCalendarDayMax)
        {
            startCalendarDay = mvB.startCalendarDay;
            var startDayNumber = (int)startCalendarDay.DayOfWeek;
            startDayNumber = startDayNumber == 0 ? 7 : startDayNumber;
            firstCalendarDay = startCalendarDay.AddDays(-startDayNumber + 1);
            showCreateMultiple();
        }
        else
        {
            _toastService.ShowError("boundry can be moved only before first day");
        }
        if (mvB.endCalendarDay >= endCalendarDayMin)
        {
            endCalendarDay = mvB.endCalendarDay;
            showCreateMultiple();
        }
        else
        {
            _toastService.ShowError("boundry can be moved only after last day");
        }
    }


    public async void CreateGoalHandler()
    {
        await GoalService.AddGoal(goal);
        //await GoalService.LoadGoals();
        NavigationManager.NavigateTo("dashboard", true);
    }

    public async void SaveChangesHandler()
    {
        CloseChangesHandler();
        await GoalService.EditGoal(goal);
        GoalService.CurrentGoal = GoalService.TempGoal;
        await onCloseChanges.InvokeAsync();

    }

    public async void CloseChangesHandler()
    {
        closeEditMultiple();
        await onCloseChanges.InvokeAsync();
    }


    private Tuple<string, int>
    GetStyleCumulativeValueAndDecideIfIsDayInGoal(DateTime currentCalendarDay)
    {
        dates.Add(currentCalendarDay.Date.ToShortDateString());
        //not planned goal date, if actual day index is equal to number of days we know ther will be no more goal dayes
        if (dayIndex == goal.Days.Count)
        {
            checkedValues.Add(lastCheckedValue); // mozna je navic
            cumulativeValues.Add(cumulativeValue); // mozna je navic
            isDayInGoal = false;
            if (isInCheck)
            {

                return new Tuple<string, int>
                    ("color: grey; font - weight: 200; ", cumulativeValue);
            }
            else
            {
                if (!isInEditMultiple && !isInCreateMultiple) // standart printing
                {
                    return new Tuple<string, int>
                        ("border: 2px dashed black; font-weight: 400;cursor: pointer;", cumulativeValue);
                }
                else if (!isInEditMultiple) // printing create multiple
                {
                    return new Tuple<string, int>
                               ("border: 2px dashed black; font-weight: 400;", cumulativeValue);
                }
                else
                {
                    return new Tuple<string, int>
                       ("border: 1px solid black;  font-weight: 400;", cumulativeValue);
                }
            }
        }

        currentGoalDay = goal.Days.ElementAt(dayIndex);
        //Console.WriteLine("note:" + currentGoalDay.Note);

        // planned goal date
        if (currentGoalDay.StartDate.Date == currentCalendarDay.Date) // !day is goalDay
        {
            if (currentGoalDay.CheckedValue != null)
            {
                lastCheckedValue = currentGoalDay.CheckedValue;
            }
            cumulativeValue += currentGoalDay.Value; // only for goal day there is cummulative value edit
            isDayInGoal = true; // this for actual printing calendar
            dayIndex++;// only for goal day there is dayindex inceased

            checkedValues.Add(lastCheckedValue);
            cumulativeValues.Add(cumulativeValue);

            if (isInCheck)
            {

                return new Tuple<string, int>
                    ("border: 1px solid black; background-color: Orange; font-weight: 600; cursor: pointer;", cumulativeValue);
            }
            else
            {
                if (!isInEditMultiple && !isInCreateMultiple) // standart printing
                {
                    return new Tuple<string, int>
                        ("border: 2px solid black; background-color: PaleGreen; font-weight: 600; cursor: pointer;", cumulativeValue);
                }
                else if (!isInEditMultiple) // printing create multiple
                {
                    return new Tuple<string, int>
                               ("border: 1px solid black; background-color: PaleGreen; font-weight: 400;", cumulativeValue);
                }
                else
                {
                    return new Tuple<string, int>
                       ("border: 2px solid black; background-color: PaleGreen; font-weight: 600;", cumulativeValue);
                }
            }
        }

        //not planed goal date
        checkedValues.Add(lastCheckedValue);
        cumulativeValues.Add(cumulativeValue);


        isDayInGoal = false;
        if (isInCheck)
        {

            return new Tuple<string, int>
                ("color: grey; font - weight: 200; ", cumulativeValue);
        }
        else
        {
            if (!isInEditMultiple && !isInCreateMultiple) // standart printing
            {
                return new Tuple<string, int>
                    ("border: 2px dashed black; font-weight: 400;cursor: pointer;", cumulativeValue);
            }
            else if (!isInEditMultiple) // printing create multiple
            {
                return new Tuple<string, int>
                           ("border: 2px dashed black; font-weight: 400;", cumulativeValue);
            }
            else
            {
                return new Tuple<string, int>
                   ("border: 1px solid black; font-weight: 400;", cumulativeValue);
            }
        }
    }


    private void CellClicked(DateTime currentDay, int currentCellcumulativeValue)
    {
        if (isInEditMultiple || isInCreateMultiple) // if in editing mode of editing multiple days clicking on cells make no action
        {
            return;
        }

        GoalDay tempGoalDay = goal.Days.FirstOrDefault(goalDay => goalDay.StartDate.Date.Equals(currentDay.Date));
        if (tempGoalDay != null && isInCheck)
        {
            modalCumulativeValue = currentCellcumulativeValue;
            modalGoalDay = tempGoalDay;
            isModalInEditMode = true;
            ModalCheck.Open();
        }
        else if (tempGoalDay != null && !isInCheck)
        {
            modalGoalDay = tempGoalDay;
            isModalInEditMode = true;
            Modal.Open();
        }
        else if (!isInCheck) // creatinggoal
        {
            TimeSpan genetaredTime = goal.StartDateGenerated.TimeOfDay;
            modalGoalDay = new GoalDay { IsAllDay = goal.IsAllDayGenerated, StartDate = currentDay.Date + genetaredTime, LengthTime = goal.LengthTimeGenerated };
            isModalInEditMode = false;
            Modal.Open();
        }

    }

    private void editMultiple()
    {

        modalGoalDay = new GoalDay { IsAllDay = goal.IsAllDayGenerated, StartDate = new DateTime(), LengthTime = goal.LengthTimeGenerated };
        isModalInEditMode = true;
        Modal.Open();
    }

    private void createMultiple()
    {

        modalGoalDay = new GoalDay { IsAllDay = goal.IsAllDayGenerated, StartDate = new DateTime(), LengthTime = goal.LengthTimeGenerated };
        isModalInEditMode = false;
        Modal.Open();
    }


    private void recalculate(int recalculateMode, int valueChange, bool modifyDuration, bool modifyNote)
    {
        if (!isInEditMultiple) //single day editing
        {
            if (recalculateMode == 0)
            {
                DistributeValueChangeToDays(modalGoalDay, valueChange);
            }
            else if (recalculateMode == 1)
            {
                RecalcutateTotalValue(valueChange);
            }
        }
        else // multiple days recalculation
        {
            if (recalculateMode == 0)
            {
                DistributeValueChangeToDaysMultiplePlusCopyValueAndDurationAndNote(-valueChange, modifyDuration, modifyNote, recalculateMode != -1);
            }
            else if (recalculateMode == 1)
            {
                RecalcutateTotalValueMultiplePlusCopyValueAndDurationAndNote(modifyDuration, modifyNote, recalculateMode != -1); // same function as for editing single day
            }
            else
            {
                CopyValueAndDurationAndNote(modifyDuration, modifyNote, recalculateMode != -1);
            }
        }
    }


    private void RecalcutateTotalValueMultiplePlusCopyValueAndDurationAndNote(bool modifyDuration, bool modifyNote, bool modifyValue)
    {
        CopyValueAndDurationAndNote(modifyDuration, modifyNote, modifyValue);//value have to be copied from edited temp day to all selected dayas
        int totalValue = 0;

        foreach (GoalDay day in goal.Days)
        {
            totalValue += day.Value;
        }

        goal.TotalValue = totalValue;
    }

    private void CopyValueAndDurationAndNote(bool modifyDuration, bool modifyNote, bool modifyValue)
    {
        int i = 0;
        foreach (GoalDay day in goal.Days)
        {

            if (checkboxesChecked[i])
            {
                day.CheckedValue = modalGoalDay.CheckedValue; // checked value is always copyed

                if (modifyNote)
                {
                    if (modalGoalDay.Note == null)
                    {
                        day.Note = null;
                    }
                    else
                    {
                        day.Note = (String)modalGoalDay.Note.Clone();
                    }
                }

                if (modifyDuration)
                {
                    day.LengthTime = modalGoalDay.LengthTime;
                    day.IsAllDay = modalGoalDay.IsAllDay;
                }

                if (modifyValue)
                {
                    day.Value = modalGoalDay.Value;
                }
            }
            i++;
        }
    }

    private void DistributeValueChangeToDays(GoalDay excludedDay, int valueChange)
    {

        int valueChangeMultiplier = 1;
        int daysCount = goal.Days.Count - 1; // we dont count excluded day

        int Value = valueChange / daysCount;
        if (valueChange < 0)
        {
            valueChange *= -1;
            valueChangeMultiplier = -1;
        }
        int RestofValue = valueChange % daysCount;

        foreach (GoalDay day in goal.Days)
        {
            if (day != excludedDay)
            {
                day.Value += Value;
            }
        }
        int i = 0;
        while (RestofValue > 0)
        {
            if (goal.Days[i] != excludedDay)
            {
                goal.Days[i].Value += valueChangeMultiplier;
                RestofValue--;
            }
            i++;
        }
    }

    private void DistributeValueChangeToDaysMultiplePlusCopyValueAndDurationAndNote(int valueChangeFromZero, bool modifyDuration, bool modifyNote, bool modifyValue) //Bude se hodne menit
    {
        int valueChangeMultiplier = 1;

        int valueChange = 0;
        int daysCount = goal.Days.Count;

        int i = 0;
        foreach (GoalDay day in goal.Days)
        {
            if (checkboxesChecked[i])// change from method DistributeTotalValueToDays is are not focusing on excluded day instead it we have checkboxesChecked array
            {
                valueChange += day.Value - valueChangeFromZero;
                daysCount--;
            }
            i++;
        }

        int Value = valueChange / daysCount;

        if (valueChange < 0)
        {
            valueChange *= -1; // for modulo, valueChange with real sign is already used in preceding division
            valueChangeMultiplier = -1;
        }

        int RestofValue = valueChange % daysCount;

        i = 0;
        foreach (GoalDay day in goal.Days)
        {
            if (!checkboxesChecked[i])
            {
                goal.Days[i].Value += Value;
            }
            i++;
        }

        i = 0;
        while (RestofValue > 0)
        {
            if (!checkboxesChecked[i])
            {
                goal.Days[i].Value += valueChangeMultiplier;
                RestofValue--;
            }
            i++;
        }
        CopyValueAndDurationAndNote(modifyDuration, modifyNote, modifyValue);//value have to be copied from edited temp day to all selected dayas
    }


    private void RecalcutateTotalValue(int valueChanege)
    {
        goal.TotalValue -= valueChanege;

    }



    private void createGoalDay()
    {
        goal.Days.Add(modalGoalDay);
        goal.Days.Sort();
        int indexNewDay = goal.Days.IndexOf(modalGoalDay); //checkboxesChecked array has to be increased by 1 element, index of new Goal Day is saved

        bool[] checkboxesCheckedTemp = new bool[checkboxesChecked.Length + 1];
        int j = 0;
        for (int i = 0; i < checkboxesChecked.Length; i++)
        {
            if (i == indexNewDay) // when index of newly created Goal day index is encountered false value is assing to at and index of newly created array is also increased
            {
                checkboxesCheckedTemp[j++] = false;

            }
            checkboxesCheckedTemp[j++] = checkboxesChecked[i]; // in same passage (no else here!!) value is also copyed from original array, so j is increaed twice, new array is inceased by 1 so it matches
        }
        checkboxesChecked = checkboxesCheckedTemp;

        if (modalGoalDay.StartDate < startCalendarDayMax)
        {
            startCalendarDayMax = modalGoalDay.StartDate;
        }
        else if (modalGoalDay.StartDate > endCalendarDayMin)
        {
            endCalendarDayMin = modalGoalDay.StartDate;
        }

    }


    private void deleteGoalDay()
    {
        int j;
        if (!isInEditMultiple)
        {
            int indexDeleteDay = goal.Days.IndexOf(modalGoalDay); //checkboxesChecked array has to be decreased by 1 element, index of deleted Goal Day is saved
            goal.Days.Remove(modalGoalDay);

            bool[] checkboxesCheckedTemp = new bool[checkboxesChecked.Length - 1];
            j = 0;
            for (int i = 0; i < checkboxesChecked.Length; i++)
            {
                if (i == indexDeleteDay) // when index of newly created Goal day index is encountered assigning values is skipped, j index is not incresed in this passage
                {
                    continue;
                }
                checkboxesCheckedTemp[j++] = checkboxesChecked[i]; // in same passage (no else here!!) value is also copyed from original array, so j is increaed twice, new array is inceased by 1 so it matches
            }
            checkboxesChecked = checkboxesCheckedTemp;
        }

        else
        {
            j = 0;
            int numberOfRemoveDays = 0;
            foreach (GoalDay day in goal.Days)
            {
                if (checkboxesChecked[j++])
                {
                    numberOfRemoveDays--;
                }
            }

            bool[] checkboxesCheckedTemp = new bool[checkboxesChecked.Length - numberOfRemoveDays];

            j = 0;
            numberOfRemoveDays = 0;
            for (int i = 0; i < checkboxesChecked.Length; i++)
            {
                if (checkboxesChecked[i])
                {
                    goal.Days.RemoveAt(i - numberOfRemoveDays);
                    numberOfRemoveDays++;
                    continue;

                }
                checkboxesCheckedTemp[j++] = checkboxesChecked[i];
            }
            checkboxesChecked = checkboxesCheckedTemp;
        }

    }


    private void Refresh()
    {
        Console.WriteLine("****refresh");
        //InitializeCalendar();
        //if (isInCheck)
        //{

        //await JSRuntime.InvokeVoidAsync("destroyChart");
        //await JSRuntime.InvokeVoidAsync("drawChart", dates, cumulativeValues, checkedValues);
        // }
        StateHasChanged();
    }


    public void InitializeCalendar()
    {
        startCalendarDay = goal.Days.ElementAt(0).StartDate;

        var startDayNumber = (int)startCalendarDay.DayOfWeek;
        startDayNumber = startDayNumber == 0 ? 7 : startDayNumber;

        firstCalendarDay = startCalendarDay.AddDays(-startDayNumber + 1);
        endCalendarDay = goal.Days.ElementAt(goal.Days.Count - 1).StartDate;

        currentCalendarDay = firstCalendarDay;
        dayIndex = 0;
        lastPrintedMonth = -1;

        startCalendarDayMax = startCalendarDay;
        endCalendarDayMin = endCalendarDay;
        mvB.startCalendarDay = startCalendarDay;
        mvB.endCalendarDay = endCalendarDay;
        startCalendarDayMax = startCalendarDay;
        endCalendarDayMin = endCalendarDay;
    }


    //protected async override Task OnParametersSetAsync()
    protected override void OnParametersSet()
    {
        if (goal == null)
        {
            base.OnParametersSet();
            return;
        }

        /*
        if (isInEdit && !isInCheck)
        {
        //originalGoal = goal.


        base.OnParametersSet();

        }
        */

        checkboxesChecked = new bool[goal.Days.Count];
        InitializeCalendar();
        isCalendarVisible = true;
        //DistributeTotalValueToDays(null,goal.TotalValue);
        base.OnParametersSet();
        //await JSRuntime.InvokeVoidAsync("destroyChart");
        //await JSRuntime.InvokeVoidAsync("drawChart", dates, cumulativeValues, checkedValues);
        //Refresh()
        //await Refresh();

    }
}
