<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @if (isInEdit)
                    {
                        <span>Edit Day</span>
                    }
                    else
                    {
                        {<span>Create Day</span>}
                    }
                    <span>@(tempGoalDay.StartDate)</span>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Modal body text goes here.</p>
                <EditForm Model="tempGoalDay">
                    <div class="form-group">
                        <label for="showTime">All Day</label>
                        <InputCheckbox id="showTime" @bind-Value="tempGoalDay.IsAllDay" class="form-checked"></InputCheckbox>
                        <br />
                        @if (!tempGoalDay.IsAllDay)
                        {
                            <span>Starting Time </span><InputText type="time" @bind-Value="@StartDateProxy" />
                            <span>Length of session </span><InputText type="time" @bind-Value="@LengthTimeProxy" />
                        }
                    </div>
                    <div class="form-group">
                        <label for="note">Note</label>
                        <InputTextArea id="note" @bind-Value="tempGoalDay.Note" class="form-control"></InputTextArea>

                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                @if (isInEdit)
                {
                    <button type="button" class="btn btn-primary" @onclick="() => Save()">Save changes</button>
                    <button type="button" class="btn btn-danger" @onclick="() => Remove()">Remove day</button>
                }
                else
                {
                    <button type="button" class="btn btn-primary" @onclick="() => Create()">Save changes</button>
                }
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>



@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Parameter]
    public GoalDay editGoalDay { get; set; }
    [Parameter]
    public bool isInEdit { get; set; }

    [Parameter]
    public EventCallback OnCreateButtonClicked { get; set; }
    [Parameter]
    public EventCallback OnDeleteButtonClicked { get; set; }
    [Parameter]
    public EventCallback OnGoalDayChanged { get; set; }


    public GoalDay tempGoalDay { get; set; }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public string StartDateProxy
    {
        get => tempGoalDay.StartDate.ToString("HH\\:mm");
        set
        {
            TimeSpan StartTime;
            TimeSpan.TryParseExact(value, "hh\\:mm\\:ss", null, out StartTime);
            tempGoalDay.StartDate = tempGoalDay.StartDate.Date + StartTime;
        }
    }

    public string LengthTimeProxy
    {
        get
        {
            DateTime LocalDateTime = new DateTime();
            LocalDateTime = LocalDateTime + tempGoalDay.LengthTime;
            return LocalDateTime.ToString("HH\\:mm");
        }

        set
        {
            TimeSpan LocalLengthTime;
            TimeSpan.TryParseExact(value, "hh\\:mm\\:ss", null, out LocalLengthTime);
            tempGoalDay.LengthTime = LocalLengthTime;
        }
    }

    private async void Create()
    {

        editGoalDay.StartDate = tempGoalDay.StartDate;
        editGoalDay.LengthTime = tempGoalDay.LengthTime;
        editGoalDay.IsAllDay = tempGoalDay.IsAllDay;

        await OnCreateButtonClicked.InvokeAsync();
        await OnGoalDayChanged.InvokeAsync();
    }

    private async void Remove()
    {
        await OnDeleteButtonClicked.InvokeAsync();
    }

    public async void Save()
    {
        if (tempGoalDay.Note != String.Empty)
        {
            editGoalDay.Note = (String)tempGoalDay.Note.Clone();
        }

        editGoalDay.StartDate = tempGoalDay.StartDate;
        editGoalDay.LengthTime = tempGoalDay.LengthTime;
        editGoalDay.IsAllDay = tempGoalDay.IsAllDay;

        await OnGoalDayChanged.InvokeAsync();
    }


    protected override void OnParametersSet()
    {

        base.OnParametersSet();

        tempGoalDay = new GoalDay();

        if (editGoalDay.Note == null)
        {
            tempGoalDay.Note = String.Empty;
        }
        else
        {
            tempGoalDay.Note = (String)editGoalDay.Note.Clone();
        }

        tempGoalDay.StartDate = editGoalDay.StartDate;
        tempGoalDay.LengthTime = editGoalDay.LengthTime;
        tempGoalDay.IsAllDay = editGoalDay.IsAllDay;
    }



    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;

        StateHasChanged();
    }


    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;

        StateHasChanged();
    }
}